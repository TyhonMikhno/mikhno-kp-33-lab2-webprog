package Lab2Application;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/orders")
public class OrderController {

    private final OrderService orderService;
    private final PizzaRepository pizzaRepository;
    private final PizzeriaRepository pizzeriaRepository;

    @Autowired
    public OrderController(OrderService orderService,
                           PizzaRepository pizzaRepository,
                           PizzeriaRepository pizzeriaRepository) {
        this.orderService = orderService;
        this.pizzaRepository = pizzaRepository;
        this.pizzeriaRepository = pizzeriaRepository;
    }

    // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—ñ—Ü–µ—Ä—ñ–π —É –≤—Å—ñ —à–∞–±–ª–æ–Ω–∏
    @ModelAttribute("pizzerias")
    public List<Pizzeria> loadPizzerias() {
        return pizzeriaRepository.findAll();
    }

    // üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
    @GetMapping
    public String listOrders(Model model) {
        model.addAttribute("orders", orderService.getAllOrders());
        return "order-list";
    }

    // ‚ûï –§–æ—Ä–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    @GetMapping("/new")
    public String showCreateForm(Model model) {
        model.addAttribute("order", new Order());
        model.addAttribute("pizzas", pizzaRepository.findAll());
        return "order-form";
    }

    @PostMapping
public String saveOrUpdateOrder(@ModelAttribute("order") Order order,
                                 BindingResult result,
                                 Model model) {
    Long pizzaId = order.getPizza().getId();
    int quantity = order.getQuantity();
    String customerName = order.getCustomerName();

    boolean isDuplicate = (order.getId() == null)
            ? orderService.orderExists(customerName, quantity, pizzaId)
            : orderService.orderExistsExceptCurrent(customerName, quantity, pizzaId, order.getId());

    if (isDuplicate) {
        result.rejectValue("customerName", "duplicate", "–¢–∞–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î.");
    }

    if (quantity < 1) {
        result.rejectValue("quantity", "invalid", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 1.");
    }

    if (result.hasErrors()) {
        model.addAttribute("pizzas", pizzaRepository.findAll());
        model.addAttribute("pizzerias", pizzeriaRepository.findAll());
        return "order-form";
    }

    // üîß –ì–æ–ª–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞: —è–∫—â–æ ID —î ‚Äî —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    if (order.getId() != null) {
        Optional<Order> existingOpt = orderService.getOrderById(order.getId());
        if (existingOpt.isPresent()) {
            Order existing = existingOpt.get();
            existing.setCustomerName(order.getCustomerName());
            existing.setQuantity(order.getQuantity());
            existing.setPizza(order.getPizza());
            existing.setPizzeria(order.getPizzeria());
            orderService.saveOrder(existing);
            return "redirect:/orders";
        }
    }

    // –Ø–∫—â–æ ID –Ω–µ–º–∞ ‚Äî —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
    orderService.saveOrder(order);
    return "redirect:/orders";
}

    // ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    @GetMapping("/{id}")
    public String showEditForm(@PathVariable Long id, Model model) {
        Optional<Order> orderOpt = orderService.getOrderById(id);
        if (orderOpt.isPresent()) {
            model.addAttribute("order", orderOpt.get());
            model.addAttribute("pizzas", pizzaRepository.findAll());
            return "order-form";
        } else {
            return "redirect:/orders";
        }
    }

    // üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è
    @GetMapping("/{id}/delete")
    public String deleteOrder(@PathVariable Long id) {
        orderService.deleteOrder(id);
        return "redirect:/orders";
    }
}
